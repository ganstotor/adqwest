/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ZIP-–∫–æ–¥–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
 *
 * 1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫–æ–º —à—Ç–∞—Ç–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
 * 2. –ù–∞—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö —à—Ç–∞—Ç–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π (—Å —É—á—ë—Ç–æ–º —Ä–∞–¥–∏—É—Å–∞).
 * 3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç ZIP-GeoJSON-—Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–∏—Ö —à—Ç–∞—Ç–æ–≤.
 * 4. –§–∏–ª—å—Ç—Ä—É–µ—Ç ZIP-–∫–æ–¥—ã, —á—å–∏ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–∞–¥–∏—É—Å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞).
 * 5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ZIP-–∫–æ–¥–æ–º –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —à—Ç–∞—Ç–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ZIP-–∫–æ–¥–æ–≤ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.
 */


import { haversineDistance, getStateFromCoords, findNearbyStates } from "./geo";
import stateAbbrMap from "./stateAbbreviations";

type GeoFeature = {
  type: string;
  properties: { ZCTA5CE10: string };
  geometry: {
    type: string;
    coordinates: number[][][] | number[][][][];
  };
};

type ZipListItem = {
  key: string;
  state: string;
};

export async function getZipList(
  location: { latitude: number; longitude: number },
  radius: number
): Promise<ZipListItem[]> {
  // üîç –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à—Ç–∞—Ç
  const currentState = await getStateFromCoords(location.latitude, location.longitude);

  // üìç –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —à—Ç–∞—Ç—ã, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π
  const nearbyStates = await findNearbyStates(location, radius, currentState);

  const allZips: ZipListItem[] = [];

  for (const state of nearbyStates) {
    const abbr = stateAbbrMap[state];
    if (!abbr) continue;

    const url = `https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/${abbr}_${state
      .toLowerCase()
      .replace(/ /g, "_")}_zip_codes_geo.min.json`;

    try {
      const res = await fetch(url);
      const geo = await res.json();

      const filtered = geo.features.filter((f: GeoFeature) => {
        const polygons =
          f.geometry.type === "Polygon"
            ? (f.geometry.coordinates as number[][][])
            : (f.geometry.coordinates as number[][][][]).flat();

        return polygons.some((polygon) =>
          polygon.some(
            ([lng, lat]) =>
              haversineDistance(location.latitude, location.longitude, lat, lng) <= radius
          )
        );
      });

      const zipItems = filtered.map((f: GeoFeature) => ({
        key: f.properties.ZCTA5CE10,
        state: abbr.toUpperCase(),
      }));

      allZips.push(...zipItems);
    } catch (e) {
      console.warn(`Failed to load ZIPs for ${state}:`, e);
    }
  }

  return allZips;
}
